[
  {
    "objectID": "In-Class_Ex/In-Class_Ex_04/In-Class_Ex_04.html",
    "href": "In-Class_Ex/In-Class_Ex_04/In-Class_Ex_04.html",
    "title": "In-Class Exercise_4",
    "section": "",
    "text": "pacman::p_load(plotly, DT, patchwork, ggstatsplot, tidyverse)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nplot_ly(data = exam_data, # don't have to define aes(), but need to add ~\n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nWarning in geom_point(dotsize = 1): Ignoring unknown parameters: `dotsize`\n\nggplotly(p) #<<\n\n\n\n\n\n\nlibrary(ggstatsplot)\n\n\nggbetweenstats(\n  data=exam_data,\n  x=GENDER,\n  y=MATHS,\n  type=\"p\",\n  message=FALSE\n)\n\n\n\n\n\nggscatterstats(\n  data=exam_data,\n  x=MATHS,\n  y=ENGLISH,\n  marginal=FALSE\n)\n\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n  )%>%\n  mutate(se=sd/sqrt(n-1))\n\nmy_sum\n\n# A tibble: 4 × 5\n  RACE        n  mean    sd    se\n  <chr>   <int> <dbl> <dbl> <dbl>\n1 Chinese   193  76.5  15.7  1.13\n2 Indian     12  60.7  23.4  7.04\n3 Malay     108  57.4  21.1  2.04\n4 Others      9  69.7  10.7  3.79\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width=0.2,\n    colour=\"black\",\n    alpha=0.9,\n    size=0.5\n  )+\n  geom_point(aes\n             (x=RACE,\n               y=mean),\n             stat=\"identity\",\n             color=\"red\",\n             size=1.5,\n             alpha=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_01.html",
    "href": "Take-Home-Exercise/Take-Home-Exercise_01.html",
    "title": "Take Home Exercise 01",
    "section": "",
    "text": "Create an age-sex pyramid to visualize Singapore’s demographic structure.\n\n\nSingstat regularly releases its latest demographics data on its website. You may refer to this data for this task: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022.\n\n\n\nI explored the dataset by putting Population in Columns and Age group in Rows.\n\nTo create an age pyramid by sex, we need to divide population sum by female and male.\n\nBy using the default “Population” field, I edited the formula to contain only female population. To create male population field, simply duplicate the female population field and change the code with “Male”\n\nNow we have both female and population! Now, simply put these two fields under Column. How can we make this look like a pyramid?\n\nOne way to do so is reverse the axis of female population chart. You can do it by right-clicking the chart and click on “reverse”.\n\nOnce you reverse the axis, color the chart to differentiate female and male chart. Go to Marks and click Color. To analyze age & sex distribution by different planning area, you may add a filter to select the area that you want to focus on.\n\nSort the label axis to a descending order, so that the older age group comes on top. You can do this by right-clicking Age Group, and adjust Sort Order option. Change the sheet name so that it matches your filtered planning area.\n\nI chose 9 planning areas to be plotted in Trellis Chart to lay out different areas distribution in one view. Before we move on, I erased axis labels and adjusted header size to save some space in the dashboard. Then, I duplicated 8 more tabs, applied different planning area, and named them accordingly.\n\nTableau has a very useful function called Dashboard where you can put visualizations in different tabs in one sheet. Drag & drop planning areas in 3*3, make them fit the screen. Note that the bar chart does not indicate absolute number. You may bring mouse cursor over to the chart and read the exact value from the marker.\n\nWe have our age & sex pyramid in trellis chart, here are key findings -\n\n\n\nSelected 9 areas can be grouped by similar sub-categories as per their location and geographic characteristics – Town (Downtown Core, Newton), West (Bukit Timah, Clementi), North-East (Serangoon, Hougang), East (Tampines, Changi), and North (Sembawang).\nDowntown core has low elderly and kids’ group, instead has mostly 30~40s. Downtown core area has private residences targeting expats or high-income businesses. Therefore, the population pattern shows extremely low percentage of seniors and young kids. Population pattern shows that residents here are in their prime period of career path, which aligns with age group of 30~40s who could afford expensive rent. Among the rest of 8 planning areas, Newton shows the most similar pattern as Downtown Core. However, it has high percentage of middle age, and quite a lot of kids and teenagers. This pattern indicates that Newton has family-unit residents.\nBukit Timah and Clementi have similar population patterns with high portion of children and teenagers, as well as middle age. At the same time, they have quite a lot of 20s population as well. The pattern could be due to institutes near these planning areas, such as NUS, SIM, and polytechnics. Between Bukit Timah and Clementi, Clementi has more senior population, resulting in shorter bars for age groups below 20s.\nSimilarly, North-East area including Serangoon and Hougang has relatively higher distribution of senior population of age group above. 60. Together with Tampines, these areas have distinct pattern of “Star-shape.” There are distinctively standing out age groups with age interval of thirty years. For example, in Tampines, age group of 30 to 34 stands out, and similarly age group of 60 to 64 stands out. This may indicate that star-shape area may have bigger residences which could accommodate three generation families – grandparents, young parents, and their kids.\nIn Changi area, it is difficult to generalize the result of pattern as its absolute population is smaller than the rest of others, however, it still has unique pattern of higher population in middle age, could be the result of different gender distribution of logistics and aviation industry.\n\n\n\nBusiness operators may choose Downtown Core area to target expats or high-income residents with premiums services, such as fitness centres, value-added service clinics, or luxury restaurants. Education centres may consider West area to improve learning facilities. West area could be a good option for private institutions targeting teenagers and young twenties. For North-East area, it would be a good choice to have more senior facilities. Moreover, in Tampines area, bigger apartments of more than 4 rooms would be ideal to accommodate big families."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html",
    "title": "Take-Home-Exercise_02",
    "section": "",
    "text": "For this Take-Home Exercise 2, I would like to introduce how we can make the visualization of take-home exercise 1 better in terms of clarity and aesthetics."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#problem-statement",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#problem-statement",
    "title": "Take-Home-Exercise_02",
    "section": "Problem Statement",
    "text": "Problem Statement\nFor a recap, exercise 1’s task was to create a trellis chart of age & gender pyramids in 9 selected planning areas.\n\n\n\nHow can we improve visualization?\n\n\nAlthough this visualization has managed to plot pyramids by different planning area, there are still some rooms to improve to make it look better!\nClarity\nFrom the perspective of the audience who first read this chart, they may not be familiar with the terms used in the chart. Therefore, it would be desirable to spell out acronyms, such as “Planning Area” instead of “PA”. In addition, title can also be improved to deliver the original intention of the task. For example, simple and clear title such as “Singapore’s Age and Sex Pattern by Planning Area” could be good enough. Last but not least, adding footnotes or descriptions to make the chart more understandable could be another way to improve the clarity of this visualization.\nAesthetics\nThere are mainly two issues with this visualization: First, it is hard to tell female and male bars from each pyramid. Second, repeated labels make the visualization less readable. In this article, I will suggest an improved visualization by using ggplot and tidyverse."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#importing-the-data",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#importing-the-data",
    "title": "Take-Home-Exercise_02",
    "section": "Importing the data",
    "text": "Importing the data\nFirst, start from loading tidyverse and importing dataset.\n\n\nShow the code\npacman::p_load(tidyverse)\n\n\nIn this task, I used Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 published by Department of Statistics, Singapore.\nI removed null data and wrong category from the csv file, and rebinded male and female dataset.\n\n\nShow the code\n# prepare cleaned data\nmale_pop <- read_csv(\"data/Male_Pop_June_2022.csv\")\n\n\nRows: 24003 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Sex, PA, Subzone, AG, Floor Area\ndbl (1): Time\nnum (1): Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nfemale_pop <- read_csv(\"data/Female_Pop_June_2022.csv\")\n\n\nRows: 24228 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Sex, PA, Subzone, AG, Floor Area\ndbl (1): Time\nnum (1): Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\n# removed null data, wrong category\n# bind and inspect data\n\ntotal_pop <- rbind(male_pop, female_pop)\n\n\n\n\n\nData Cleaning Result\n\n\nThen, need to aggregate and leave necessary columns only for easier analysis.\n\n\nShow the code\nfreq_pop <- total_pop %>%\n  group_by(`Sex`, `AG`, `PA`) %>%\n  summarise('Count'= sum(`Population`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Sex', 'AG'. You can override using the\n`.groups` argument.\n\n\n\n\n\nFrequency Aggregation\n\n\nIn this practice, I chose Ang Mo Kio, Bedok, Bukit Panjang, Clementi, Choa Chu Kang, Hougang, Jurong East, Serangoon, and Tampines. Here are steps to improve visualization, with Ang Mo Kio example."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#step-by-step-plotting",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#step-by-step-plotting",
    "title": "Take-Home-Exercise_02",
    "section": "Step-by-Step Plotting",
    "text": "Step-by-Step Plotting\nAng Mo Kio\nFilter the dataset by PA == “Ang Mo Kio”, then see how the plot looks like with female dataset.\n\n\nShow the code\n# get AMK first\n\namk_pop <- freq_pop %>%\n  filter(PA == \"Ang Mo Kio\")\n\namk_pop_female <- freq_pop %>%\n  filter(Sex == \"Female\", PA == \"Ang Mo Kio\")\n\nggplot(amk_pop_female,\n       aes(x = Count,\n           y = AG,\n           fill = PA)) + \n  geom_col()\n\n\n\n\n\nLet’s see how to plot male data. You may use convert the x axis in negative value to switch the axis direction.\n\n\nShow the code\namk_pop_male <- freq_pop %>%\n  filter(Sex == \"Male\", PA == \"Ang Mo Kio\")\n\nggplot(amk_pop_male,\n       aes(x = -Count,\n           y = AG,\n           fill = PA)) + \n  geom_col()\n\n\n\n\n\nNow, let’s put them together and see how age & sex pyramid looks like.\n\n\nShow the code\namk_pyramid <- amk_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\namk_plot <- \n  ggplot(amk_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex)) +\n    geom_col() \n\namk_plot # to get the final pyramid\n\n\n\n\n\nAs we will need to put each chart together, let’s remove overlapping labels and legend.\n\n\nShow the code\namk_plot <- \n  ggplot(amk_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Ang Mo Kio\")\n\namk_plot\n\n\n\n\n\nSimilarly, you can create 8 other plots using the same method. In this practice, I chose Bedok, Bukit Panjang, Clementi, Choa Chu Kang, Hougang, Jurong East, Serangoon, and Tampines.\nBedok\n\n\nShow the code\n# Bedok\nbedok_pop <- freq_pop %>%\n  filter(PA == \"Bedok\")\n\nbedok_pyramid <- bedok_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nbedok_plot <- \n  ggplot(bedok_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Bedok\")\n\n\nBukit Panjang\n\n\nShow the code\n# Bukit Panjang\nbk_pj_pop <- freq_pop %>%\n  filter(PA == \"Bukit Panjang\")\n\nbk_pj_pyramid <- bk_pj_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nbk_pj_plot <- \n  ggplot(bk_pj_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Bukit Panjang\")\n\n\nClementi\n\n\nShow the code\n# Clementi\nclementi_pop <- freq_pop %>%\n  filter(PA == \"Clementi\")\n\nclementi_pyramid <- clementi_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nclementi_plot <- \n  ggplot(clementi_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Clementi\")\n\n\nChoa Chu Kang\n\n\nShow the code\n# Choa Chu Kang\ncck_pop <- freq_pop %>%\n  filter(PA == \"Choa Chu Kang\")\n\ncck_pyramid <- cck_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\ncck_plot <- \n  ggplot(cck_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Choa Chu Kang\")\n\n\nHougang\n\n\nShow the code\n# Hougang\nhougang_pop <- freq_pop %>%\n  filter(PA == \"Hougang\")\n\nhougang_pyramid <- hougang_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nhougang_plot <- \n  ggplot(hougang_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Hougang\") \n\n\nJurong East\n\n\nShow the code\n# Jurong East\njr_est_pop <- freq_pop %>%\n  filter(PA == \"Jurong East\")\n\njr_est_pyramid <- jr_est_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\njr_est_plot <- \n  ggplot(jr_est_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Jurong East\")\n\n\nSerangoon\n\n\nShow the code\n# Serangoon\nsrgoon_pop <- freq_pop %>%\n  filter(PA == \"Serangoon\")\n\nsrgoon_pyramid <- srgoon_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nsrgoon_plot <- \n  ggplot(srgoon_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Serangoon\")\n\n\nTampines\n\n\nShow the code\n# Tampines\n\ntamp_pop <- freq_pop %>%\n  filter(PA == \"Tampines\")\n\ntamp_pyramid <- tamp_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\ntamp_plot <- \n  ggplot(tamp_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Tampines\")"
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#trellis-chart",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#trellis-chart",
    "title": "Take-Home-Exercise_02",
    "section": "Trellis Chart",
    "text": "Trellis Chart\nNow we have 9 separate pyramids, let’s put them in one view using patchwork.\nYou may use following code to download patchwork package.\ndevtools::install_github(“thomasp85/patchwork”)\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(patchwork)\n\n\nOnce you have patchwork ready, you can put 9 pyramids together, and add title!\n\n\nShow the code\npatchwork <- (amk_plot | bedok_plot | bk_pj_plot)/\n  (clementi_plot | cck_plot | hougang_plot)/\n  (jr_est_plot | srgoon_plot | tamp_plot)\n\npatchwork + plot_annotation(\n  title = 'Singapore Age and Sex Pattern by Planning Area')\n\n\n\n\n\nIn this exercise, the initial visualization has been improved in terms of clarity and aesthetics by:\n\nAdding appropriate title and planning area\nSeparating female and male with different colors for easier comparison\nRemoving axis title for cleaner view\nPutting 9 pyramid plots in 1 view"
  }
]