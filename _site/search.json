[
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_01.html",
    "href": "Take-Home-Exercise/Take-Home-Exercise_01.html",
    "title": "Take Home Exercise 01",
    "section": "",
    "text": "Create an age-sex pyramid to visualize Singapore’s demographic structure.\n\n\nSingstat regularly releases its latest demographics data on its website. You may refer to this data for this task: Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022.\n\n\n\nI explored the dataset by putting Population in Columns and Age group in Rows.\n\nTo create an age pyramid by sex, we need to divide population sum by female and male.\n\nBy using the default “Population” field, I edited the formula to contain only female population. To create male population field, simply duplicate the female population field and change the code with “Male”\n\nNow we have both female and population! Now, simply put these two fields under Column. How can we make this look like a pyramid?\n\nOne way to do so is reverse the axis of female population chart. You can do it by right-clicking the chart and click on “reverse”.\n\nOnce you reverse the axis, color the chart to differentiate female and male chart. Go to Marks and click Color. To analyze age & sex distribution by different planning area, you may add a filter to select the area that you want to focus on.\n\nSort the label axis to a descending order, so that the older age group comes on top. You can do this by right-clicking Age Group, and adjust Sort Order option. Change the sheet name so that it matches your filtered planning area.\n\nI chose 9 planning areas to be plotted in Trellis Chart to lay out different areas distribution in one view. Before we move on, I erased axis labels and adjusted header size to save some space in the dashboard. Then, I duplicated 8 more tabs, applied different planning area, and named them accordingly.\n\nTableau has a very useful function called Dashboard where you can put visualizations in different tabs in one sheet. Drag & drop planning areas in 3*3, make them fit the screen. Note that the bar chart does not indicate absolute number. You may bring mouse cursor over to the chart and read the exact value from the marker.\n\nWe have our age & sex pyramid in trellis chart, here are key findings -\n\n\n\nSelected 9 areas can be grouped by similar sub-categories as per their location and geographic characteristics – Town (Downtown Core, Newton), West (Bukit Timah, Clementi), North-East (Serangoon, Hougang), East (Tampines, Changi), and North (Sembawang).\nDowntown core has low elderly and kids’ group, instead has mostly 30~40s. Downtown core area has private residences targeting expats or high-income businesses. Therefore, the population pattern shows extremely low percentage of seniors and young kids. Population pattern shows that residents here are in their prime period of career path, which aligns with age group of 30~40s who could afford expensive rent. Among the rest of 8 planning areas, Newton shows the most similar pattern as Downtown Core. However, it has high percentage of middle age, and quite a lot of kids and teenagers. This pattern indicates that Newton has family-unit residents.\nBukit Timah and Clementi have similar population patterns with high portion of children and teenagers, as well as middle age. At the same time, they have quite a lot of 20s population as well. The pattern could be due to institutes near these planning areas, such as NUS, SIM, and polytechnics. Between Bukit Timah and Clementi, Clementi has more senior population, resulting in shorter bars for age groups below 20s.\nSimilarly, North-East area including Serangoon and Hougang has relatively higher distribution of senior population of age group above. 60. Together with Tampines, these areas have distinct pattern of “Star-shape.” There are distinctively standing out age groups with age interval of thirty years. For example, in Tampines, age group of 30 to 34 stands out, and similarly age group of 60 to 64 stands out. This may indicate that star-shape area may have bigger residences which could accommodate three generation families – grandparents, young parents, and their kids.\nIn Changi area, it is difficult to generalize the result of pattern as its absolute population is smaller than the rest of others, however, it still has unique pattern of higher population in middle age, could be the result of different gender distribution of logistics and aviation industry.\n\n\n\nBusiness operators may choose Downtown Core area to target expats or high-income residents with premiums services, such as fitness centres, value-added service clinics, or luxury restaurants. Education centres may consider West area to improve learning facilities. West area could be a good option for private institutions targeting teenagers and young twenties. For North-East area, it would be a good choice to have more senior facilities. Moreover, in Tampines area, bigger apartments of more than 4 rooms would be ideal to accommodate big families."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html",
    "title": "Take-Home-Exercise_02",
    "section": "",
    "text": "For this Take-Home Exercise 2, I would like to introduce how we can make the visualization of take-home exercise 1 better in terms of clarity and aesthetics."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#problem-statement",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#problem-statement",
    "title": "Take-Home-Exercise_02",
    "section": "Problem Statement",
    "text": "Problem Statement\nFor a recap, exercise 1’s task was to create a trellis chart of age & gender pyramids in 9 selected planning areas.\n\n\n\nHow can we improve visualization?\n\n\nAlthough this visualization has managed to plot pyramids by different planning area, there are still some rooms to improve to make it look better!\nClarity\nFrom the perspective of the audience who first read this chart, they may not be familiar with the terms used in the chart. Therefore, it would be desirable to spell out acronyms, such as “Planning Area” instead of “PA”. In addition, title can also be improved to deliver the original intention of the task. For example, simple and clear title such as “Singapore’s Age and Sex Pattern by Planning Area” could be good enough. Last but not least, adding footnotes or descriptions to make the chart more understandable could be another way to improve the clarity of this visualization.\nAesthetics\nThere are mainly two issues with this visualization: First, it is hard to tell female and male bars from each pyramid. Second, repeated labels make the visualization less readable. In this article, I will suggest an improved visualization by using ggplot and tidyverse."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#importing-the-data",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#importing-the-data",
    "title": "Take-Home-Exercise_02",
    "section": "Importing the data",
    "text": "Importing the data\nFirst, start from loading tidyverse and importing dataset.\n\n\nShow the code\npacman::p_load(tidyverse)\n\n\nIn this task, I used Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2022 published by Department of Statistics, Singapore.\nI removed null data and wrong category from the csv file, and rebinded male and female dataset.\n\n\nShow the code\n# prepare cleaned data\nmale_pop <- read_csv(\"data/Male_Pop_June_2022.csv\")\n\n\nRows: 24003 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Sex, PA, Subzone, AG, Floor Area\ndbl (1): Time\nnum (1): Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nfemale_pop <- read_csv(\"data/Female_Pop_June_2022.csv\")\n\n\nRows: 24228 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): Sex, PA, Subzone, AG, Floor Area\ndbl (1): Time\nnum (1): Population\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\n# removed null data, wrong category\n# bind and inspect data\n\ntotal_pop <- rbind(male_pop, female_pop)\n\n\n\n\n\nData Cleaning Result\n\n\nThen, need to aggregate and leave necessary columns only for easier analysis.\n\n\nShow the code\nfreq_pop <- total_pop %>%\n  group_by(`Sex`, `AG`, `PA`) %>%\n  summarise('Count'= sum(`Population`)) %>%\n  ungroup()\n\n\n`summarise()` has grouped output by 'Sex', 'AG'. You can override using the\n`.groups` argument.\n\n\n\n\n\nFrequency Aggregation\n\n\nIn this practice, I chose Ang Mo Kio, Bedok, Bukit Panjang, Clementi, Choa Chu Kang, Hougang, Jurong East, Serangoon, and Tampines. Here are steps to improve visualization, with Ang Mo Kio example."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#step-by-step-plotting",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#step-by-step-plotting",
    "title": "Take-Home-Exercise_02",
    "section": "Step-by-Step Plotting",
    "text": "Step-by-Step Plotting\nAng Mo Kio\nFilter the dataset by PA == “Ang Mo Kio”, then see how the plot looks like with female dataset.\n\n\nShow the code\n# get AMK first\n\namk_pop <- freq_pop %>%\n  filter(PA == \"Ang Mo Kio\")\n\namk_pop_female <- freq_pop %>%\n  filter(Sex == \"Female\", PA == \"Ang Mo Kio\")\n\nggplot(amk_pop_female,\n       aes(x = Count,\n           y = AG,\n           fill = PA)) + \n  geom_col()\n\n\n\n\n\nLet’s see how to plot male data. You may use convert the x axis in negative value to switch the axis direction.\n\n\nShow the code\namk_pop_male <- freq_pop %>%\n  filter(Sex == \"Male\", PA == \"Ang Mo Kio\")\n\nggplot(amk_pop_male,\n       aes(x = -Count,\n           y = AG,\n           fill = PA)) + \n  geom_col()\n\n\n\n\n\nNow, let’s put them together and see how age & sex pyramid looks like.\n\n\nShow the code\namk_pyramid <- amk_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\namk_plot <- \n  ggplot(amk_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex)) +\n    geom_col() \n\namk_plot # to get the final pyramid\n\n\n\n\n\nAs we will need to put each chart together, let’s remove overlapping labels and legend.\n\n\nShow the code\namk_plot <- \n  ggplot(amk_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Ang Mo Kio\")\n\namk_plot\n\n\n\n\n\nSimilarly, you can create 8 other plots using the same method. In this practice, I chose Bedok, Bukit Panjang, Clementi, Choa Chu Kang, Hougang, Jurong East, Serangoon, and Tampines.\nBedok\n\n\nShow the code\n# Bedok\nbedok_pop <- freq_pop %>%\n  filter(PA == \"Bedok\")\n\nbedok_pyramid <- bedok_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nbedok_plot <- \n  ggplot(bedok_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Bedok\")\n\n\nBukit Panjang\n\n\nShow the code\n# Bukit Panjang\nbk_pj_pop <- freq_pop %>%\n  filter(PA == \"Bukit Panjang\")\n\nbk_pj_pyramid <- bk_pj_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nbk_pj_plot <- \n  ggplot(bk_pj_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Bukit Panjang\")\n\n\nClementi\n\n\nShow the code\n# Clementi\nclementi_pop <- freq_pop %>%\n  filter(PA == \"Clementi\")\n\nclementi_pyramid <- clementi_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nclementi_plot <- \n  ggplot(clementi_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Clementi\")\n\n\nChoa Chu Kang\n\n\nShow the code\n# Choa Chu Kang\ncck_pop <- freq_pop %>%\n  filter(PA == \"Choa Chu Kang\")\n\ncck_pyramid <- cck_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\ncck_plot <- \n  ggplot(cck_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Choa Chu Kang\")\n\n\nHougang\n\n\nShow the code\n# Hougang\nhougang_pop <- freq_pop %>%\n  filter(PA == \"Hougang\")\n\nhougang_pyramid <- hougang_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nhougang_plot <- \n  ggplot(hougang_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Hougang\") \n\n\nJurong East\n\n\nShow the code\n# Jurong East\njr_est_pop <- freq_pop %>%\n  filter(PA == \"Jurong East\")\n\njr_est_pyramid <- jr_est_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\njr_est_plot <- \n  ggplot(jr_est_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Jurong East\")\n\n\nSerangoon\n\n\nShow the code\n# Serangoon\nsrgoon_pop <- freq_pop %>%\n  filter(PA == \"Serangoon\")\n\nsrgoon_pyramid <- srgoon_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\nsrgoon_plot <- \n  ggplot(srgoon_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Serangoon\")\n\n\nTampines\n\n\nShow the code\n# Tampines\n\ntamp_pop <- freq_pop %>%\n  filter(PA == \"Tampines\")\n\ntamp_pyramid <- tamp_pop %>%\n  mutate(\n    Count = case_when(\n      Sex == \"Male\" ~ -Count,\n      TRUE ~ Count\n    ))\n\ntamp_plot <- \n  ggplot(tamp_pyramid,\n         aes(x = Count,\n             y = AG,\n             fill = Sex), show.legend=FALSE) +\n    geom_col() +\n    theme(axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          legend.position = \"none\") + \n    ggtitle(\"Tampines\")"
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_02.html#trellis-chart",
    "href": "Take-Home-Exercise/Take-Home-Exercise_02.html#trellis-chart",
    "title": "Take-Home-Exercise_02",
    "section": "Trellis Chart",
    "text": "Trellis Chart\nNow we have 9 separate pyramids, let’s put them in one view using patchwork.\nYou may use following code to download patchwork package.\ndevtools::install_github(“thomasp85/patchwork”)\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(patchwork)\n\n\nOnce you have patchwork ready, you can put 9 pyramids together, and add title!\n\n\nShow the code\npatchwork <- (amk_plot | bedok_plot | bk_pj_plot)/\n  (clementi_plot | cck_plot | hougang_plot)/\n  (jr_est_plot | srgoon_plot | tamp_plot)\n\npatchwork + plot_annotation(\n  title = 'Singapore Age and Sex Pattern by Planning Area')\n\n\n\n\n\nIn this exercise, the initial visualization has been improved in terms of clarity and aesthetics by:\n\nAdding appropriate title and planning area\nSeparating female and male with different colors for easier comparison\nRemoving axis title for cleaner view\nPutting 9 pyramid plots in 1 view"
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_03.html",
    "href": "Take-Home-Exercise/Take-Home-Exercise_03.html",
    "title": "Take-Home-Exercise_03",
    "section": "",
    "text": "In this exercise, we will explore Singapore’s flat resale data. The data was extracted from Singstat.\n\nLoad Data & Library\nFirst, load the necessary libraries using pacman.\n\n\nShow the code\npacman::p_load(plotly, DT, patchwork, ggstatsplot, tidyverse)\n\n\nIn this exploration, we will focus on 2022 resale records, and 3/4/5-room flat type only. Based on Singapore’s area plan, each town has been grouped as “North-East”, “Central”, “East”, “North” and “West”. For detailed list of each town in respective region, you may refer to code below.\n\n\nShow the code\ndata <- read_csv(\"data/resale-flat-prices-based-on-registration-date-from-jan-2017-onwards.csv\")\n\n\nRows: 146215 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nresale_data <- data %>%\n  mutate(region = \n           case_when(town %in% c(\"ANG MO KIO\", \"HOUGANG\", \"PUNGGOL\", \"SERANGOON\", \"SENGKANG\") ~ \"North-East\",\n                     town %in% c(\"BISHAN\", \"BUKIT MERAH\", \"BUKIT TIMAH\", \"CENTRAL AREA\", \"GEYLANG\", \"KALLANG/WHAMPOA\", \"MARINE PARADE\", \"QUEENSTOWN\", \"TOA PAYOH\") ~ \"Central\",\n                     town %in% c(\"BEDOK\", \"PASIR RIS\", \"TAMPINES\") ~ \"East\",\n                     town %in% c(\"SEMBAWANG\", \"WOODLANDS\", \"YISHUN\") ~ \"North\",\n                     town %in% c(\"BUKIT BATOK\", \"BUKIT PANJANG\", \"CHOA CHU KANG\", \"CLEMENTI\", \"JURONG EAST\", \"JURONG WEST\") ~ \"West\")) %>%\n  filter(flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\")) %>%\n  filter(month >= '2022-01' & month <='2022-12')\n\n\n\n\nDistribution of Resale Price\nTo start with, let’s see the distribution of resale price by region. Histogram is a good visualization method to see the trend of price range. Each count of resale data in 2022 were plotted to this histogram. All the price range follows SGD ($).\nTo plot a histogram, you can use geom_histogram(). As we need to compare the spread of each histogram, you may set alpha value so that each plot will look translucent. You may also set different bins value. Bigger bins value will result in smoother histogram. When hovering over the histogram, you will find details of each sales count in a tooltip.\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(scales)\n\n\n\nAttaching package: 'scales'\n\n\nThe following object is masked from 'package:purrr':\n\n    discard\n\n\nThe following object is masked from 'package:readr':\n\n    col_factor\n\n\nShow the code\np <- ggplot(resale_data, aes(x = resale_price, fill = region)) +\n  geom_histogram(position = \"identity\", alpha = 0.3, bins = 100) +\n  labs(title = \"Resale Price Distribution by Region\",\n       x = \"Resale Price\",\n       y = \"Frequency\") +\n  scale_x_continuous(labels = comma)\n  ggplotly(tooltip = c(\"fill\", \"x\", \"y\"))\n\n\n\n\n\n\nKey findings:\n\nCentral has the widest resale price range, meaning that price difference gap is wide in this area.\nNorth, North-East and West area has narrow resale price range, indicating that resale price of these areas could have been rationalized.\n\n\n\nCloser Look by Region & Flat Type\nMoving forward to take a closer look at each region, the histogram will be split by region and by flat type - 3/4/5-room. To effectively see the necessary statistic trends, a boxplot chart is an appropriate choice to plot the data. In this boxplot chart, you can see the percentile information, outliers and spread of resale price records. In ggplot, you can set fill value as flat_type to see resale price by region and by flat type.\n\n\nShow the code\nlibrary(plotly)\n\np1 <- ggplot(data=resale_data, aes(x=region, y=resale_price, fill=flat_type)) +\n  geom_boxplot() +\n  labs(title = \"Resale Price by Region and Flat Type\",\n       x = \"Region\",\n       y = \"Resale Price\") +\n  scale_y_continuous(labels = comma)\n\n\nKey findings:\n\nCentral area has extreme outliers, especially in 5-room type flats. These outliers could be the reason of wide spread in Central area’s resale price distribution.\nGenerally, 3-room type flats’ resale prices are pretty much regularized, compared to 4 or 5 rooms flats. As in the box plot, mean of 3-room type flats in each region are distributed at the similar price range.\nNorth region has the least outliers compared to the rest of regions. It could be due to a lot of HDB residences, whose price is rationalized by the government.\n\n\n\nResale Types by Singapore Region\nBased on key findings from resale price by region and by flat type, the count of resale records could have affected the mean and spread of flat price. Stacked bar chart will show the percentage of 3/4/5-room type in each region.\nTo plot stacked bar plots, you can use geom_bar() and set position as “fill”. Since we are counting the number of sales record, stat will be set as “count”. Since we want to know percentage result, y axis will be modified on a 100% scale. Last but not least, you will find details of each sales count in a tooltip by adding ggplotly.\n\n\nShow the code\np2 <- ggplot(resale_data, aes(fill = flat_type, y = after_stat(count), x = region)) +\n  geom_bar(position = \"fill\", stat = \"count\") +\n  scale_y_continuous(labels = scales::percent_format()) +\n  ggtitle(\"Resale Types by Singapore Region\")\nggplotly(p2, tooltips = c(\"x\", \"y: %{y*100}%\", \"fill\"))\n\n\n\n\n\n\nKey findings:\n\nIn all regions, 4-room flat is the most common type of flat. This indicates that 4-room flat may have the highest demand or supply in the resale market.\n3-room type flat takes the highest percentage in central area, which is almost at the similar share with 4-room type. This observation could be due to relatively more expensive flat price and smaller flat size in this area.\n\n\n\nLease Commence Date and Price\nOther than room type, lease commence date may affect the price as well. By using ggscatterstats, we can see the necessary stats information together with scatter plot. It will come together with trend line as well, so that we can see how the resale price changes over time. Similar to previous charts, you may add tooltips to see the data point of outliers.\n\n\nShow the code\np3 <- ggscatterstats(\n  data = resale_data,\n  x = lease_commence_date,\n  y = resale_price,\n  marginal = FALSE,\n  ) +\n  labs(title = \"Resale Price by Lease Commence Date\",\n       x = \"Year\",\n       y = \"Resale Price\") +\n  scale_y_continuous(labels = comma)  \nggplotly(p3, tooltips = c(\"x\", \"y\", \"text\"))\n\n\n\n\n\n\nKey findings:\n\nResale price is increasing over time, with significant p-value of less than 0.05.\nThe trend indicates that the newer the flat is the more expensive the resale price is.\n\n\n\nCloser Look at Central & North Region\nBased on previous findings, we can tell these two regions - Central and North - are at the most extreme end in terms of well-selling flat types as well as price range. Therefore, we will look into these regions using violin plot. Violin plot can be created by using geom_violin(). You may overlay boxplots to each violin plots using geom_boxplot(). To make the visualization look less crowded, you may set the color of boxplot in monochrome by setting the color attribute as grey.\n\n\nShow the code\np4 <- resale_data %>% \n  filter(region == \"Central\") %>%\n  ggplot(aes(x=town, y=resale_price, fill=town)) +\n  labs(title = \"Resale Price by Town - Central\",\n       x = \"Town\",\n       y = \"Resale Price\") + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"grey\", alpha=0.2) +\n  scale_y_continuous(labels = comma) +\n  coord_flip()\n\np4\n\n\n\n\n\n\n\nShow the code\np5 <- resale_data %>% \n  filter(region == \"North\") %>%\n  ggplot(aes(x=town, y=resale_price, fill=town)) +\n  labs(title = \"Resale Price by Town - North\",\n       x = \"Town\",\n       y = \"Resale Price\") + \n  geom_violin() +\n  geom_boxplot(width=0.1, color=\"grey\", alpha=0.2) +\n  scale_y_continuous(labels = comma) +\n  coord_flip()\n\np5\n\n\n\n\n\nKey findings:\n\nSpread of resale price is wide in all Central area towns\nAmong the towns in Central area, Geylang has the lowest median and thicker base in its violin plot. It indicates that this area is relatively more affordable in the Central area.\nBukit Timah and Bukit Mera have less curvy shape in their violins. It may indicate that their price is relatively stable than the other towns.\nIn North region, spread of resale price is less extreme than Central area. - Yishun has outliers in resale price. Based on previous finding from lease commence date chart, we may investigate further to see if Yishun have newer residential area plans, which may resulted in many outliers here."
  },
  {
    "objectID": "Take-Home-Exercise/Take-Home-Exercise_04.html",
    "href": "Take-Home-Exercise/Take-Home-Exercise_04.html",
    "title": "Take-Home-Exercise_04",
    "section": "",
    "text": "In this data exploration, we will look into the import and export data sets. The data set has been sourced by Department of Statistics, Singapore (DOS) under Merchandise Trade by Region/Market.\n\nImport Data\nTo start, necessary libraries will be loaded, as well as data sets. Import and export data sets will be separately loaded to the work space.\n\n\nShow the code\n#Unpivot the data\npacman::p_load(plotly, DT, patchwork, ggstatsplot, tidyverse)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(readr)\n\n\n\n\nShow the code\nimports <- read_csv(\"data/imports.csv\")\n\n\nRows: 119 Columns: 566\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (457): Data Series, 2013 Dec, 2013 Nov, 2013 Oct, 2013 Sep, 2013 Aug, 20...\nnum (109): 2023 Jan, 2022 Dec, 2022 Nov, 2022 Oct, 2022 Sep, 2022 Aug, 2022 ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nShow the code\nexports <- read_csv(\"data/exports.csv\")\n\n\nRows: 91 Columns: 566\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (409): Data Series, 2009 Dec, 2009 Nov, 2009 Oct, 2009 Sep, 2009 Aug, 20...\nnum (157): 2023 Jan, 2022 Dec, 2022 Nov, 2022 Oct, 2022 Sep, 2022 Aug, 2022 ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nData Wrangling\nThe data is summarized in table format, however this format is not easy to run data analysis libraries. Therefore, the data wrangling will start from transposing the dataset. Here, I used gather() to transpose data by Data Series column, with Month and Amount.\n\n\nShow the code\nimports_trans <- gather(imports, \"Month\", \"Import_Amt\", -`Data Series`)\nexports_trans <- gather(exports, \"Month\", \"Export_Amt\", -`Data Series`)\n\nhead(imports_trans)\n\n\n# A tibble: 6 × 3\n  `Data Series`                                Month    Import_Amt\n  <chr>                                        <chr>    <chr>     \n1 Total Merchandise Imports (Thousand Dollars) 2023 Jan 44393664  \n2 America (Million Dollars)                    2023 Jan 6267.4    \n3 Asia (Million Dollars)                       2023 Jan 30174     \n4 Europe (Million Dollars)                     2023 Jan 6427.8    \n5 Oceania (Million Dollars)                    2023 Jan 983.3     \n6 Africa (Million Dollars)                     2023 Jan 541.1     \n\n\nShow the code\nhead(exports_trans)\n\n\n# A tibble: 6 × 3\n  `Data Series`                                Month    Export_Amt\n  <chr>                                        <chr>    <chr>     \n1 Total Merchandise Exports (Thousand Dollars) 2023 Jan 49575205  \n2 America (Million Dollars)                    2023 Jan 5823.5    \n3 Asia (Million Dollars)                       2023 Jan 34646.8   \n4 Europe (Million Dollars)                     2023 Jan 5384      \n5 Oceania (Million Dollars)                    2023 Jan 2844.5    \n6 Africa (Million Dollars)                     2023 Jan 876.3     \n\n\nFor this exploration, data analysis will only focus on the years from 2020 to 2022. In our data set, the import and export columns are in string. Therefore, the column values need to be converted to numeric. Second, for easier time series plotting, Month columns will be converted to Date variables using as.Date().\nWhen you look into the Data Series, you can find that Total Merchandise Exports row is unnecessary as they are summary of the rest of countries. Also, each Data Series has “Thousand Dollars” or “Million Dollars” repetitive. For easier data analysis, we will remove them from Data Series value and leave only continent or country names.\nLast but not least, as we are going to focus on recent three years, use filter() to remove unnecessary year rows.\n\n\nShow the code\n# Convert from string to date value\nimports_mth <- imports_trans %>%\n  mutate(Month = as.Date(paste0(Month, \" 01\"), format = \"%Y %b %d\"), Import_Amt = as.numeric(Import_Amt))\n\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n\nShow the code\nexports_mth <- exports_trans %>%\n  mutate(Month = as.Date(paste0(Month, \" 01\"), format = \"%Y %b %d\"), Export_Amt = as.numeric(Export_Amt))\n\n\nWarning in mask$eval_all_mutate(quo): NAs introduced by coercion\n\n\nShow the code\n# Remove unnecessary rows\nimports_recent <- imports_mth %>%\n  filter(Month > as.Date(\"2019-12-01\") & Month < as.Date(\"2023-01-01\")) %>% \n  mutate(`Data Series` = str_replace_all(`Data Series`, \"\\\\(|Thousand Dollars|\\\\)|Million Dollars\", \"\")) %>%\n  filter(`Data Series` != \"Total Merchandise Imports \") # to remove total summary row\n\nexports_recent <- exports_mth %>%\n  filter(Month > as.Date(\"2019-12-01\") & Month < as.Date(\"2023-01-01\")) %>% \n  mutate(`Data Series` = str_replace_all(`Data Series`, \"\\\\(|Thousand Dollars|\\\\)|Million Dollars\", \"\")) %>%\n  filter(`Data Series` != \"Total Merchandise Exports \") # to remove total summary row\n\n\nTwo data sets, imports_recent and exports_recent, will again segmented by two data sets - by continents and by countries.\n\n\nShow the code\n# Import dataset\ncontinents_imp <- imports_recent %>%\n  filter(`Data Series` %in% c(\"America \", \"Asia \", \"Europe \", \"Oceania \", \"Africa \", \"European Union \"))\n\ncountries_imp <- imports_recent %>%\n  filter(!`Data Series` %in% c(\"America \", \"Asia \", \"Europe \", \"Oceania \", \"Africa \", \"European Union \"))\n\n# Export dataset\ncontinents_exp <- exports_recent %>%\n  filter(`Data Series` %in% c(\"America \", \"Asia \", \"Europe \", \"Oceania \", \"Africa \", \"European Union \"))\n\ncountries_exp <- exports_recent %>%\n  filter(!`Data Series` %in% c(\"America \", \"Asia \", \"Europe \", \"Oceania \", \"Africa \", \"European Union \"))\n\n\n\n\nExploring time trend with line chart\nLine chart is one of the most commonly used plot types to show the time trend. First, load the data using ggplot, then use geom_line() to start plotting line charts.\nFor x-axis, labels will be converted back to “2022 Dec” format from 2022-12-01. As each data set is segregated by month, x-axis scale will be broken by 1 month. Next, to put all x-axis labels without overlapping, labels will be rotated by 45-degree.\nFinally, you can check the details of each time series by hovering to tool tips.\n\n\nShow the code\nlibrary(ggplot2)\n\n# Create the plot\nplt_continent_imp <- ggplot(continents_imp, aes(x = Month, y = Import_Amt, color = `Data Series`)) +\n  geom_line() +\n  labs(title = \"Imports by Continent\", x = \"Month\", y = \"Import Amount\") +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%Y %b\",\n               limits = as.Date(c(\"2020-01-01\", \"2022-12-01\"), \"%Y-%m-%d\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\nggplotly(plt_continent_imp, tooltip = c(\"color\", \"x\", \"y\", \"fill\"))\n\n\n\n\n\n\n\n\nShow the code\nplt_continent_exp <- ggplot(continents_exp, aes(x = Month, y = Export_Amt, color = `Data Series`)) +\n  geom_line() +\n  labs(title = \"Exports by Continent\", x = \"Month\", y = \"Export Amount\") +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%Y %b\",\n               limits = as.Date(c(\"2020-01-01\", \"2022-12-01\"), \"%Y-%m-%d\")) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\nggplotly(plt_continent_exp, tooltip = c(\"color\", \"x\", \"y\", \"fill\"))\n\n\n\n\n\n\nKey findings:\n\nIn terms of volume, Asia has the most amount across all continents, in both import and export amount.\nIn 2022 Feb, there was a sudden dip in both import and export amount in Asia.\nThe sudden dip of import and export in Asia in 2022 Feb may have impacted to be impacted by other continents as well, since other continents especially America, European Union, and Europe also showed similar sudden dip in this period.\n\n\n\nExploring time trend with heat map\nAnother way to look into time trend could be using heat map. To see the contrast in more vivid way, selecting colors in extreme end could be an option. However, it is important to choose an appropriate color scheme for people with color vision deficiency.\nTo plot a heat map, geom_tile() was used. Similarly, x-axis labels were formatted in “2022 Dec” style and rotated 45 degree for better readability.\n\n\nShow the code\nheat_continent_imp <- ggplot(continents_imp, aes(x = Month, y = `Data Series`, fill = Import_Amt)) +\n  geom_tile() +\n  labs(title = \"Imports by Continent\", x = \"Month\", y = \"Import Amount\", fill = \"Import Amount\") +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%Y %b\",\n               limits = as.Date(c(\"2020-01-01\", \"2022-12-01\"), \"%Y-%m-%d\")) +\n  scale_fill_gradient(low = \"lightgrey\", high = \"blue\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(heat_continent_imp, tooltip = c(\"x\", \"y\", \"fill\"))\n\n\n\n\n\n\n\n\nShow the code\nheat_continent_exp <- ggplot(continents_exp, aes(x = Month, y = `Data Series`, fill = Export_Amt)) +\n  geom_tile() +\n  labs(title = \"Exports by Continent\", x = \"Month\", y = \"Export Amount\") +\n  scale_x_date(date_breaks = \"1 month\", date_labels = \"%Y %b\",\n               limits = as.Date(c(\"2020-01-01\", \"2022-12-01\"), \"%Y-%m-%d\")) +\n  scale_fill_gradient(low = \"lightgrey\", high = \"blue\") +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\nggplotly(heat_continent_exp, tooltip = c(\"x\", \"y\", \"fill\"))"
  },
  {
    "objectID": "In-Class_Ex/In-Class_Ex_04/In-Class_Ex_04.html",
    "href": "In-Class_Ex/In-Class_Ex_04/In-Class_Ex_04.html",
    "title": "In-Class Exercise_4",
    "section": "",
    "text": "pacman::p_load(plotly, DT, patchwork, ggstatsplot, tidyverse)\n\n\nexam_data <- read_csv(\"data/Exam_data.csv\")\n\nRows: 322 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (4): ID, CLASS, GENDER, RACE\ndbl (3): ENGLISH, MATHS, SCIENCE\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\nplot_ly(data = exam_data, # don't have to define aes(), but need to add ~\n        x = ~ENGLISH, \n        y = ~MATHS, \n        color = ~RACE) #<<\n\nNo trace type specified:\n  Based on info supplied, a 'scatter' trace seems appropriate.\n  Read more about this trace type -> https://plotly.com/r/reference/#scatter\n\n\nNo scatter mode specifed:\n  Setting the mode to markers\n  Read more about this attribute -> https://plotly.com/r/reference/#scatter-mode\n\n\n\n\n\n\n\np <- ggplot(data=exam_data, \n            aes(x = MATHS,\n                y = ENGLISH)) +\n  geom_point(dotsize = 1) +\n  coord_cartesian(xlim=c(0,100),\n                  ylim=c(0,100))\n\nWarning in geom_point(dotsize = 1): Ignoring unknown parameters: `dotsize`\n\nggplotly(p) #<<\n\n\n\n\n\n\nlibrary(ggstatsplot)\n\n\nggbetweenstats(\n  data=exam_data,\n  x=GENDER,\n  y=MATHS,\n  type=\"p\",\n  message=FALSE\n)\n\n\n\n\n\nggscatterstats(\n  data=exam_data,\n  x=MATHS,\n  y=ENGLISH,\n  marginal=FALSE\n)\n\n\n\n\n\nmy_sum <- exam_data %>%\n  group_by(RACE) %>%\n  summarise(\n    n=n(),\n    mean=mean(MATHS),\n    sd=sd(MATHS)\n  )%>%\n  mutate(se=sd/sqrt(n-1))\n\nmy_sum\n\n# A tibble: 4 × 5\n  RACE        n  mean    sd    se\n  <chr>   <int> <dbl> <dbl> <dbl>\n1 Chinese   193  76.5  15.7  1.13\n2 Indian     12  60.7  23.4  7.04\n3 Malay     108  57.4  21.1  2.04\n4 Others      9  69.7  10.7  3.79\n\n\n\nggplot(my_sum) +\n  geom_errorbar(\n    aes(x=RACE,\n        ymin=mean-se,\n        ymax=mean+se),\n    width=0.2,\n    colour=\"black\",\n    alpha=0.9,\n    size=0.5\n  )+\n  geom_point(aes\n             (x=RACE,\n               y=mean),\n             stat=\"identity\",\n             color=\"red\",\n             size=1.5,\n             alpha=1)\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead."
  }
]